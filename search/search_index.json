{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Home","text":"<p>Placeholder file for index redirect functionality.</p>"},{"location":"ch340_drivers/","title":"Installing Drivers","text":"<p>If you've never connected a USB-to-serial converter to your computer before, you may need to install drivers. The drivers will depend on your USB-to-serial converter. In this case, the SparkFun RTK Torch is populated with the CH34X and a RedBoard IoT Development Board (ESP32) used to connect to a UM980 is populated with the CH340.</p> <p>You may need to install drivers for the USB-to-serial converter. Check out our section on \"How to Install CH340 Drivers\" for help with the installation.</p> <ul> <li> <p> </p> <p> How to Install CH340 Drivers </p> </li> </ul>"},{"location":"firmware_update/","title":"Firmware Update","text":"<p>Note</p> <p>The following instructions were taken from the UPrecise User Manual: 2.2.11 Receiver Upgrade. For more information about how to use UPrecise software, make sure to check out the user manual.</p> <p>Note</p> <p>At the time of writing, UPrecise Version 2.0 was used. Note that the GUI appearance and features may change upon future releases.</p> <p>You can update your firmware (they call this a firmware upgrade in the manual) using Unicore's UPrecise software. Make sure to check Unicore's UM980 product page, download center, or contact Unicore Communications for any firmware releases.</p> <p>We'll assume that you have the firmware downloaded at this point and connected to the UM980. With UPrecise open, click on the menu with the triple bar (\u2261) near the upper left of the window to expand the menu.</p> <p>The menu should expand with text next to each icon.</p> <p>Click on the Receiver Upgrade button. The following window should open up.</p> <p>Click the Select upgrade file button. Head to the folder where you downloaded the firmware and select the file. The extension should be a  *pkg file.  In this case, there was a copy of the firmware in the Update Firmware Unicore GNSS Receiver Repo named \"UM980_R4.10Build11833.pkg\". Older firmware versions that were used SparkFun products were moved to the Old Firmware folder.</p> <p>Select the GNSS receiver that will be receiving the firmware update. In this case it was Receiver1. While we are at it, select either the \"Soft reset\" or \"Hard reset\". While updating, the module will need to be reset and this selection will determine the reset method. Let's select the \"Soft Reset\" and have UPrecise reset the module.</p> <p>When ready, hit the \"Start\" button!</p> <p>Warning</p> <p>Make sure to pay attention to the progress bar! You'll want to avoid any interruptions while the firmware is updating as this will cause the upgrade to fail.</p> <p>Note</p> <p>If you have issues updating the software with the reset method chosen, try exiting the Receiver Upgrade menu by hitting the \"x\" button. Then disconnect and reconnect the module by selecting the \"Connect\" button. You will then need to open the Receiver Upgrade window again before hitting the \"Start\" button.</p> <p>Once the firmware has been updated, you will notice that the progress bar is at 100% and a message indicating that the firmware upgrade succeeded and finished. You can exit out of the window by clicking on the \"x\" button.</p>"},{"location":"hard_copy/","title":"Hard copy","text":"<p>Need to download or print our hookup guide?</p> <ul> <li>Print  (Single-Page View)<ul> <li>To save as a <code>*.pdf</code> file, select the Printer or Destination labeled Save as PDF. (Instructions will vary based on the browser)</li> </ul> </li> </ul>"},{"location":"hardware_hookup/","title":"Hardware Hookup","text":"<p>To update firmware, you will need to connect to the UM980's serial UART1 port. Make sure to check the design files and hookup guide since the design can vary between products. Below are a few examples.</p>"},{"location":"hardware_hookup/#sparkfun-rtk-torch","title":"SparkFun RTK Torch","text":"<p>For the SparkFun RTK Torch, you will need a serial passthrough via the ESP32. First, power the unit and connect a USB cable to its USB port. We do not have to worry about attaching a multi-band L1/L2/L5 antenna since there is one already built in.</p> <p>Open a serial terminal window set to 115200 baud. Then put the device into serial passthrough mode. From the main menu, navigate to: System s &gt; Hardware h &gt; UM980 Direct Connect 13. This will put the device into a passthrough mode, but with special character monitoring that allows the UM980 to be reset when bootloading is detected. Close the terminal connection so that UPrecise can connect to the COM port.</p> <p>Note</p> <p>Some terminals cause the ESP32 to reset when closing the port. This reset causes the UM980 pass-through mode to exit. TeraTerm is known to cause this issue. To enter pass-through mode we recommend using the Arduino Serial Monitor.</p>"},{"location":"hardware_hookup/#sparkfun-um980-triband-gnss-rtk-breakout","title":"SparkFun UM980 Triband GNSS RTK Breakout","text":"<p>On the SparkFun UM980 Triband GNSS RTK Breakout Board, you will need to connect a USB cable between your computer and the breakout board. Then connect a multi-band L1/L2/L5 antenna to the SMA connector.</p>"},{"location":"hardware_overview/","title":"Hardware overview","text":"<p>The electronics of the SparkFun RTK EVK is enclosed in a custom extruded aluminum case with machined end panels and slotted flanges.</p> Front View Back View <p>The image below shows a top and bottom view of the populated PCB without the enclosure.</p> PCB Top View PCB Bottom View"},{"location":"hardware_overview/#power","title":"Power","text":"<p>The SparkFun RTK EVK can be powered from the front or back of board. There is no internal battery. Schottky protection diodes and a resettable fuse are included to prevent conflicting voltages and overvoltage protection. Voltage is then regulated down to 3.3V through the three voltage regulators.</p> <ul> <li>CONFIG ESP32 \u2014 The CONFIG ESP32 includes a USB C connector to power the RTK EVK. Users can also upload code or connect to the ESP32 to a serial terminal.</li> <li>CONFIG UBLOX \u2014 The CONFIG UBLOX includes a USB C connector to power the RTK EVK as well. A USB hub is connected to this port and connects to the ZED-F9P, NEO-D9S, and LARA-R6 for users that are interested in connecting them to u-center or updating the firmware.</li> </ul> USB Connectors Highlighted in Front <p>Power can also be provided from the I/O screw terminals or PoE.</p> <ul> <li>V+ \u2014 The input voltage on this pin is between +9V and +36V. Voltage through this pin is brought down to 5V with the isolated DC-DC converter before regulated down to 3.3V. This is for users that want to pull power from a car battery or anything that is between the input voltage. This is connected to a fully-isolated DC-DC converter and regulates the voltage down to 5V.</li> <li>V- \u2014 For users connecting power through the V+, this is the essentially ground or 0V. Note that there is no direct connection between V- and GND.</li> <li>GND \u2014 The ground or 0V for the system.</li> <li>Ethernet (PoE) \u2014 The input voltage through the RJ45 connector is between +36V and +57V. Voltage is brought down to 5V with the isolated PoE module.</li> </ul> USB Connector, Ethernet POE, and Power Input on Screw Terminals Highlighted in Back <p>There is also an output power pin for 3.3V on the I/O screw terminal.</p> <ul> <li>3V3 \u2014 This pin is the output of one of the 3.3V voltage regulators (specifically the AP7361C). Note that this is only connected to the secondary power. This net is connected to the microSD card socket, ZED-F9P, NEO-D9S, LARA-R6, USB Hub, MagJack RJ45 connector's LEDs, and WIZnet 5500.</li> </ul> 3.3V Input on Screw Terminals Highlighted in Back"},{"location":"hardware_overview/#ch340-usb-to-serial-converter","title":"CH340 USB-to-Serial Converter How to Install CH340 Drivers","text":"<p>A CH340 USB-to-Serial converter is included between the USB-C connector and the ESP32. The chip can be used to send serial data between the RTK EVK and computer. You can view the output or configure the device through a serial terminal. You can also manually upload new firmware as well.</p> CH340 USB-to-Serial Converter Highlighted <p>The driver should automatically install on most operating systems. However, there is a wide range of operating systems out there. You may need to install drivers the first time you connect the chip to your computer's USB port or when there are operating system updates. For more information, check out our How to Install CH340 Drivers Tutorial.</p>"},{"location":"hardware_overview/#esp32-wrover-module","title":"ESP32-WROVER Module","text":"<p>The RTK Everywhere firmware is pre-loaded with the RTK EVK and flashed to the ESPRESSIF ESP32-WROVER module (with 16MB flash and 8MB PSRAM). The ESP32 handles all the processes. You can configure the EVK as a RTK base and push corrections to an NTRIP Caster. You can also configure the EVK as a RTK Rover and use corrections delivered over WiFi or Bluetooth. You can even update firmware over-the-air. For more information, we recommend checking out the RTK Everywhere Product Manual.</p> ESP32 Highlighted <p>Note</p> <p>The ESP32-WROVER module can only connect to a 2.4GHz WiFi network. Unfortunately, 5GHz is not supported on the ESP32-WROVER module.</p> <p>For users that want to configure the ESP32 using a serial terminal, you will simply need to connect the CONFIG ESP32 to your computer's USB port. Once connected, open a serial terminal set to 115200 baud and press any key to open the serial configuration menu. Of course, this is only one method of adjusting the settings. You can also change the settings through WiFi, Bluetooth, and a text file saved on a microSD card.</p>"},{"location":"hardware_overview/#esp32-primary-i2c-port","title":"ESP32 Primary I<sup>2</sup>C Port","text":"<p>The screw terminal on the back includes an I<sup>2</sup>C port. This is connected to the ESP32's primary I<sup>2</sup>C port.</p> <ul> <li>SCL \u2014 The ESP32 I<sup>2</sup>C bus clock on pin 22. The logic level is 3.3V. Currently, there are no pull-up resistors attached to this line. To configure, you will need to add a solder blob to the I<sup>2</sup>C jumper.</li> <li>SDA \u2014ESP32 I<sup>2</sup>C bus data on pin 21. The logic level is 3.3V. Currently, there are no pull-up resistors attached to this line. To attach the 2.2k\u03a9 pull-up resistors to the port, you will just need to add a solder blob to the I<sup>2</sup>C jumper.</li> </ul> <p>Note</p> <p>3.3V and GND are also conveniently placed next to the SCL and SDA pins. These follow the same pinout as most of the SparkFun I<sup>2</sup>C breakout boards with PTHs.</p> I2C Port Highlighted <p>The I<sup>2</sup>C peripherals connected to the primary I<sup>2</sup>C port and their address are listed below:</p> <ul> <li>ZED-F9P \u2014 0x42 (default)</li> <li>NEO-D9S \u2014 0x43 (default)</li> </ul> <p>Users can also connect to the USB hub over I<sup>2</sup>C by adding a solder blob to the jumper with two pads labeled as I2C. Once connected, the peripheral will be connected to the primary I<sup>2</sup>C port. The associated address is listed below.</p> <ul> <li>USB Hub \u2014 0x2C</li> </ul>"},{"location":"hardware_overview/#esp32-secondary-i2c-port","title":"ESP32 Secondary I<sup>2</sup>C Port","text":"<p>Inside of the enclosure, there is a Qwiic vertical port available. This is connected to the Qwiic OLED via a Qwiic cable. This port is connected to the ESP32's secondary I<sup>2</sup>C port with SCL connected to pin 15 and SDA1 connected to pin 12. The logic level is also 3.3V. Currently, there are no pull-up resistors attached to this line. To attach the 2.2k\u03a9 pull-up resistors to the port, you will just need to add a solder blob to the I<sup>2</sup>C jumper.</p> I2C Port Highlighted <p>The I<sup>2</sup>C peripheral connected to the secondary I<sup>2</sup>C port and their address is listed below:</p> <ul> <li>Qwiic OLED - (1.3in., 128x64) \u2014 0x3D (default)</li> </ul>"},{"location":"hardware_overview/#qwiic-oled-display","title":"Qwiic OLED Display","text":"<p>The RTK EVK includes the SparkFun Qwiic OLED - (1.3in., 128x64). This is connected to the ESP32 via a Qwiic port contained within the enclosure. As stated earlier, the default address for the display is 0x3D. The display provides useful information about the RTK EVK without needing to connect to a serial terminal.</p> OLED Display Highlighted <p>Below are a few examples showing some of the possible outputs from the RTK EVK. The icons are explained further in the RTK Everywhere Product Manual &gt; Hardware &gt; Displays.</p> OLED Display Output OLED Display with RTK Fixed Solution OLED Display Cycling Through Modes"},{"location":"hardware_overview/#zed-f9p-module","title":"ZED-F9P Module","text":"<p>The RTK EVK wouldn't be a an RTK without well... a high precision RTK. The RTK EVK includes a built-in u-blox ZED-F9P module for high precision GNSS. You will need to connect an active multiband antenna that is capable of receiving L1 and L2 signals. The ZED-F9P can be set as a base station or rover. There are several options to send or receive correction data depending on the mode: Ethernet, WiFi network, LTE cellular network, or the NEO-D9S. As stated earlier, the ZED-F9P is connected to the primary I<sup>2</sup>C port and uses the default address of 0x42.</p> ZED-F9P Highlighted <p>Below are a few specifications taken from the ZED-F9P's datasheet:</p> <ul> <li>Concurrent reception of GPS, GLONASS, Galileo, and BeiDou</li> <li>Receives both L1C/A and L2C bands</li> <li>184-channel u-blox F9 engine</li> <li>Time to First Fix: 25s (cold), 2s (hot)</li> <li>Max Navigation Rate: 20Hz / 25Hz depending on mode</li> <li>Horizontal Position Accuracy: 2.5m without RTK; 0.010m with RTK</li> <li>Max Altitude: 50km (31 miles)</li> <li>Max Velocity: 500m/s (1118mph)</li> </ul>"},{"location":"hardware_overview/#zed-f9p-secondary-uart-port","title":"ZED-F9P Secondary UART Port","text":"<p>The screw terminal on the back includes a UART port. This is connected to the ZED-F9P's secondary UART port for users that want to connect to other high precision GNSS modules for correction data.</p> <ul> <li>TX2 \u2014 The ZED-F9P's UART2 transmit pin. The logic level is 3.3V. Users can connect this pin to a radio module or directly to a high precision GNSS module's RX pin to provide correction data to other rovers.</li> <li>RX1 \u2014 The ZED-F9P's UART2 receive pin. The logic level is 3.3V. Users can connect this pin to a radio module or directly to a high precision GNSS module's TX pin to receive correction data provided by another base station.</li> </ul> ZED-F9PUART Correction Port Highlighted"},{"location":"hardware_overview/#zed-f9p-external-interrupt","title":"ZED-F9P External Interrupt","text":"<p>The screw terminal on the back includes an external interrupt for the ZED-F9P. The interrupt can either be an input/output pin. This can be configured using u-center to bring the module out of deep sleep or to output an interrupt for various module states.</p> ZED-F9P External Interrupt Highlighted"},{"location":"hardware_overview/#zed-f9p-time-pulse","title":"ZED-F9P Time Pulse","text":"<p>The screw terminal on the back labeled as TP includes ZED-F9Ps time pulse output (i.e. the pulse-per-second or PPS output). This pulses at 1Hz when the module gets basic GPS/GNSS position lock and can be configured using the u-center.</p> ZED-F9P Time Pulse Highlighted"},{"location":"hardware_overview/#neo-d9s","title":"NEO-D9S","text":"<p>The RTK EVK includes the built-in u-blox NEO-D9S for correction data. You will need to connect an antenna that is capable of receiving signals from the L-band to access u-blox PointPerfect correction service. The NEO-D9S is connected to the primary I<sup>2</sup>C port and uses the default address of 0x43. You will need a service provider to access the correction data.</p> NEO-D9S Highlighted <p>Below are a few specifications taken from the NEO-D9S's datasheet:</p> <ul> <li>L-Band data receiver compliance: SESTB28A</li> <li>Frequency range: 1525 to 1559MHz</li> <li>Sensitivity: 133dBm</li> <li>Time to First Frame: &lt;10s</li> <li>Receives PMP messages from Inmarsat Geosynchronous Satellites</li> </ul>"},{"location":"hardware_overview/#microsd-card-socket","title":"MicroSD Card Socket","text":"<p>The front of the RTK EVK includes a microSD card socket. Insert a microSD card into the socket until it clicks in place. Pushing the microSD card again will eject the memory card. This is connected to the ESP32's SPI port. Power is provided by the secondary power source. Users can manually flash the firmware binaries using the microSD card as opposed to over-the-air updates. Typically, the microSD card is for datalogging. The microSD card can also hold the user preferences for anyone that is interested in deploying multiple RTK EVKs with the same settings out in the field.</p> MicroSD Card Slot Highlighted <p>Note</p> <p>The RTK EVK only supports cards formatted as FAT32, which is why we recommend 32GB cards. It does not support exFAT - and most 64GB cards come pre-formatted with exFAT.</p> <p>If you need to re-format your card at any time, we recommend using the official SD Association Formatter.</p>"},{"location":"hardware_overview/#lara-r6-cellular-module","title":"LARA-R6 Cellular Module","text":"<p>The RTK EVK also includes the u-blox LARA-R6 cellular module for users that need to connect to a LTE cellular network. The module is connected to the ESP32 via UART.</p> LARA-R6 Highlighted <p>Below are a few specifications taken from the LARA-R6's datasheet:</p> <ul> <li>Region: Global</li> <li>LTE FDD Bands: 1, 2, 3, 4, 5, 7, 8, 12, 13, 18, 19, 20, 26, &amp; 28</li> <li>Certifications and approvals:</li> <li>PTCRB, GCF, FCC, ISED, RED, UKCA, NCC, RCM, Giteki, Anatel, KC, AT&amp;T,</li> <li>Verizon, T-Mobile, Deutsche Telekom, Telefonica, NTT DoCoMo, SBM, KDDI, Telstra</li> </ul> <p>Note</p> <p>Although the LARA supports GSM/GPRS, the RTK EVK does not due to the high current required.</p> <p>Note</p> <p>Currently, the RTK Everywhere firmware does not support cellular with the LARA-R6. However, we have written and tested extra code examples which will allow you to stream MQTT correction data from a u-blox PointPerfect Localized Distribution topic via the LARA-R6 cellular chip. This example demonstrates how easy it is to subscribe to PointPerfect and only receive the IP correction data you need for your location, minimizing your cellular data costs.</p>"},{"location":"hardware_overview/#nano-sim-card-socket","title":"Nano SIM Card Socket","text":"<p>To connect to an cellular network with the built-in u-blox LARA-R6 (specifically the LARA-R6001D), you will need a nano SIM card. The cellular module works with most major North American carriers (Verizon, T-Mobile, AT&amp;T, etc.). Make sure to check with your network service provider for compatibility. You also may need approval with the service carrier before the service is activated. We recommend using the Hologram SIM Card.</p> LED Highlighted"},{"location":"hardware_overview/#wiznet-w5500-ic-ethernet-jack-and-poe","title":"WIZnet W5500 IC, Ethernet Jack, and PoE","text":"<p>The RTK EVK includes a built-in Ethernet circuitry. You can connect an Ethernet cable to the back of the RTK EVK's RJ45 MagJack port. This connector includes status LEDs for Link and Activity. These LEDs can be disabled by cutting the jumpers on the back of the PCB. The port connects to the Power-over-Ethernet (PoE) module and WIZnet W5500 Ethernet transceiver. 10/100Mbps is supported with auto-negotiation. As stated earlier, the PoE module can be powered using the standard PoE voltages between +36V to +57V. Make sure to choose a PoE Ethernet Switch that meeds your needs. We have had good experience with the TP Link TL-SG1005P - available from many retailers including Amazon.</p> WIZnet W5500 IC, Ethernet Jack, and PoE Module Highlighted Ethernet Jack Highlighted"},{"location":"hardware_overview/#antenna-connections","title":"Antenna Connections","text":"<p>The back of the SparkFun RTK EVK includes a few connectors for cellular, GNSS, and WiFi antennas.</p> <ul> <li>Cell 1 \u2014 The SMA Connector labeled as Cell 1 is for the u-blox LARA-R6006. This connection represents the main RF input/output for LTE/3G/2G RF signals transmission and reception. This is intended to connect the LTE Hinged External Antenna - 698MHz-2.7GHz.</li> <li>Cell 2 \u2014 The SMA Connector labled as Cell 1 is for the u-blox LARA-R606. This connection represents the secondary RF input for LTE/3G Rx diversity and LTE MIMO 2x2 down-link RF signals reception. This is intended to connect the second LTE Hinged External Antenna - 698MHz-2.7GHz.</li> <li>GNSS \u2014 The SMA connector labeled as GNSS is for the u-blox ZED-F9P and NEO-D9S. This is connected to a GNSS splitter (Power Divider) and allows you to connect a single GNSS antenna for both modules. This is intended to connect an active multiband GNSS antenna using the SMA male to TNC male interface cable that is included in the kit. The RTK EVK provides 5V on this connector for an active multiband antenna instead of the usual 3.3V. Short-circuit and open-circuit detection is built into this connection as well. The following icons will flash whenever the RTK EVK does not detect an antenna (i.e. an open circuit) or if there is a short in the cable. Next to the icons will also indicate that there will be 0 satellites in view.</li> </ul> Antenna Open Circuit Highlighted Antenna Short Circuit Highlighted <ul> <li>ESP32 \u2014 The RP-SMA connector labeled as ESP32 is for the ESP32-WROVER. This is intended to connect the 2.4GHz WiFi/BT antenna.</li> </ul> Antenna Connectors Highlighted on Back"},{"location":"hardware_overview/#buttons","title":"Buttons","text":"<p>There are two buttons located on the front of the SparkFun RTK EVK.</p> <ul> <li>RESET \u2014 The reset button is available for users that need to manually reset the ESP32. The reset button sits flush against the front panel to prevent users from accidentally resetting the RTK EVK. You will need to press the button firmly or use a pen.</li> <li>MODE The mode button is available for users that want to change the mode. This button is connected to pin 0 on the ESP32 and can also be used as a boot button to set the ESP32 into bootloader mode when manually uploading code with the reset button.<ul> <li>RTK Modes \u2014 The available modes for the RTK EVK are listed below. A single press brings up the mode menu. Press the button twice to step through the available modes listed below. Pause on the highlighted mode to select it and change to that mode. For more information on the modes, make sure to check out the RTK Everywhere Manual.<ul> <li>BASE</li> <li>ROVER</li> <li>NTP</li> <li>Cfg Eth Configure-Via-Ethernet</li> <li>CfgWiFi Configure-Via-WiFi</li> <li>E-Pair ESP NOW Pairing</li> </ul> </li> <li>Bootloader Mode \u2014 The boot button usually allows users to force the ESP32 into bootloader mode to manually upload new code to the ESP32.</li> </ul> </li> </ul> Reset and Mode/Boot Buttons Highlighted"},{"location":"hardware_overview/#leds","title":"LEDs","text":"<p>There are three LEDs available:</p> <ul> <li>STATUS \u2014 The built-in STATUS LED is used to indicate when the BASE mode has completed its survey-in.</li> <li>LINK \u2014 The built-in LINK LED on the RJ45 MagJack connector is connected to the WIZnet 5500's LINKLED pin and is used to indicate when there is a Ethernet Link.</li> <li>ACT \u2014 The built-in ACT LED on the RJ45 MagJack connector is connected to the WIZnet 5500's ACTLED pin and used to indicate when there is Ethernet activity.</li> </ul> LED Highlighted LEDs on Ethernet Connector Highlighted"},{"location":"hardware_overview/#jumpers","title":"Jumpers","text":"<p>Note</p> <p>If this is your first time working with jumpers, check out the How to Work with Jumper Pads and PCB Traces tutorial for more information.</p> <p>The RTK EVK includes various jumpers on the back of the PCB.</p> <ul> <li>SHLD \u2014 There are two jumpers labeled as SHLD on the back of the PCB. These jumpers connect the USB Type C connector's shield pin to GND. By default, these are closed. Cut this to isolate the USB Type C connector's shield pin for the ESP32 and the ZED-F9P.</li> <li>MEAS \u2014 To enable measurements and determine how much power the RTK EVK uses, we've added a NC (normally closed) jumper between the two MEAS PTH pins. By cutting this jumper, the voltage connecting to the 3.3V voltage regulator input is interrupted. Soldering in a male jumper or wires into the accompanying holes will give you the ability to insert a current meter and precisely monitor how much current your application is consuming.</li> <li>VIN+ \u2014 The VIN+ jumper connects the I/O Screw Terminal to the 5V DC-DC converter's VIN+ pin. This is closed by default. Cut this trace to disable the connection.</li> <li>VIN- \u2014 The VIN- jumper connects the I/O Screw Terminal to the 5V DC-DC converter's VIN- pin. This is closed by default. Cut this trace to disable the connection.</li> <li>PW+ \u2014 The PW+ jumper connects the RJ45 MagJack's PW+ pin to the DP9905 PoE's VIN+ pin. This is closed by default. Cut this trace to disable the connection.</li> <li>PW- \u2014 The PW- jumper connects the RJ45 MagJack's PW- pin to the DP9905 PoE's VIN- pin. This is closed by default. Cut this trace to disable the connection.</li> <li>GNSS Reset \u2014 The GNSS reset jumper is open by default. Adding a solder blob will connect the reset button (which is currently only connected to the ESP32's reset pin) to the reset pins on both the ZED-F9P and NEO-D9S. Pulling the pin low by pressing the button will initiate a reset on the ZED-F9P and NEO-D9S. This will delete all information and trigger a cold start. As stated in the integration manual, this should only be used as a recovery option. Compared to the other jumpers, this jumper includes a 1x2 PTH. Users can also break off a 1x2 standard male header and temporarily connect a 1x2 jumper.</li> <li>I<sup>2</sup>C \u2014 This three way jumper labeled <code>I<sup>2</sup>C</code> will connect to two pull-up resistors to the I<sup>2</sup>C data and clock lines when closed. For advanced users that do not have pull-up resistors attached to the I<sup>2</sup>C lines on their microcontroller, make sure to close the jumpers with a little solder blob.</li> <li>POE LOAD \u2014 The POE LOAD creates a dummy load of 100mA on the DC/DC converter output. This is closed by default. Cut this trace to disable the dummy load.</li> <li>WIZnet W5500 Mode Jumper \u2014 For users that want to configure the WIZnet W5500 mode, there are three jumpers available to adjust the network mode. By default, the jumpers are set to 111 or \"All capable, Auto-negotiation.\" For more information on the different modes, check out the WIZnet 5500 datasheet linked in the Resources.<ul> <li>PMODE0 \u2014 Pulled high. Add as solder jumper to pull the pin low.</li> <li>PMODE1 \u2014 Pulled high. Add as solder jumper to pull the pin low.</li> <li>PMODE2 \u2014 Pulled high. Add as solder jumper to pull the pin low.</li> </ul> </li> <li>LED \u2014 The LED jumper connects the status LED to the ESP32's pin 2. This is closed by default. Cut this trace to disable the status LED.</li> <li>LINK \u2014 The LINK jumper connects the RJ45 Link LED to the WIZnet 5500 LINKLED pin. This is closed by default. Cut this trace to disable the RJ45's Link LED.</li> <li>ACT \u2014  The ACT jumper connects the RJ45 Activity LED to the WIZnet 5500 ACTLED pin. This is closed by default. Cut this trace to disable the RJ45's Link LED.</li> <li>3V3 SW EN \u2014 This three way jumper labeled 3V3 SW EN enables the XC6222 3.3V/700mA voltage regulator for the RTK EVK's secondary power to provide power for the RJ45 MagJack LEDs, W5500, ZED-F9P, NEO-D9S, USB Hub, and Qwiic OLED.  By default, the trace is pulled high. Cut the trace and add a solder blob between the center pad and the other jumper to allow the ESP32 to toggle power using pin 32.</li> <li>3V3 SW2 EN \u2014 This three way jumper labeled 3V3 SW2 EN enables the AP7361C 3.3V/1A voltage regulator for the RTK EVK's tertiary power to provide power for the LARA-R6. By default, the trace is pulled high. Cut the trace and add a solder blob between the center pad and the other jumper to allow the ESP32 to toggle power using pin 32.</li> </ul> Jumpers"},{"location":"hardware_overview/#dimensions","title":"Dimensions","text":"<p>The SparkFun RTK EVK is designed around the Metal Enclosure - Custom Aluminum Extrusion (6in. x 4in. PCB). You can find the dimensions of the enclosure below.</p> Enclosure and Panel Dimensions <p>Within the enclosure is the RTK EVK PCB. You can find the board dimensions below.</p> Board Dimensions <p>For users interested in the dimensions of the surveying antenna, it is also listed below from the SPK6618H datasheet.</p> SPK6618H Surveying Antenna Dimensions"},{"location":"introduction/","title":"Introduction","text":"<p>Over time, manufacturers will provide firmware updates running on GNSS receivers.</p> <p>This tutorial will demonstrate how to upgrade the firmware on the UM980 such as the SparkFuN RTK Torch or the SparkFun Triband GNSS RTK Breakout Board. However, it can be used for Unicore GNSS Receivers as well.</p> <ul> <li> <p> </p> <p> SparkFun RTK Torch    GPS-25662 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Triband GNSS RTK Breakout - UM980    GPS-23286 </p> </li> </ul>"},{"location":"introduction/#suggested-reading","title":"Suggested Reading","text":"<p>If you aren\u2019t familiar with the following concepts, we also recommend checking out a few of these tutorials before continuing.</p> <ul> <li> <p> </p> <p> SparkFun RTK Torch Hookup Guide </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Triband GNSS RTK Breakout - UM980 Hookup Guide </p> </li> </ul> <p>You may also be interested in the following blog posts on GNSS technologies.</p> <ul> <li> <p> <p>GPS vs GNSS</p> <li> <p> <p>What is Correction Data?</p> <li> <p> <p>Real-Time Kinematics Explained</p>"},{"location":"resources/","title":"Resources","text":"<p>Now that you've successfully got your SparkFun TriBand GNSS RTK- Breakout - UM980 up and running, it's time to incorporate it into your own project! For more information, check out the resources below:</p> <ul> <li>Unicore Communications UM980<ul> <li>General Specifications (PDF)</li> <li>Datasheet (PDF)</li> <li>User Manual (PDF)</li> <li>Reference Commands Manual (PDF)</li> <li>UPrecise V2.0 (EXE)</li> <li>UPrecise User Manual (PDF)</li> </ul> </li> <li>CH340 Drivers</li> <li>SparkFun RTK</li> </ul> <p>Or check out some of these tutorials using the UM980!</p> <ul> <li> <p> </p> <p> SparkFun RTK Everywhere Product Manual </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Triband GNSS RTK Breakout - UM980 Hookup Guide </p> </li> </ul>"},{"location":"single_page/","title":"Introduction","text":"<p>Over time, manufacturers will provide firmware updates running on GNSS receivers.</p> <p>This tutorial will demonstrate how to upgrade the firmware on the UM980 such as the SparkFuN RTK Torch or the SparkFun Triband GNSS RTK Breakout Board. However, it can be used for Unicore GNSS Receivers as well.</p> <ul> <li> <p> </p> <p> SparkFun RTK Torch    GPS-25662 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Triband GNSS RTK Breakout - UM980    GPS-23286 </p> </li> </ul>"},{"location":"single_page/#suggested-reading","title":"Suggested Reading","text":"<p>If you aren\u2019t familiar with the following concepts, we also recommend checking out a few of these tutorials before continuing.</p> <ul> <li> <p> </p> <p> SparkFun RTK Torch Hookup Guide </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Triband GNSS RTK Breakout - UM980 Hookup Guide </p> </li> </ul> <p>You may also be interested in the following blog posts on GNSS technologies.</p> <ul> <li> <p> <p>GPS vs GNSS</p> <li> <p> <p>What is Correction Data?</p> <li> <p> <p>Real-Time Kinematics Explained</p>"},{"location":"single_page/#hardware-hookup","title":"Hardware Hookup","text":"<p>To update firmware, you will need to connect to the UM980's serial UART1 port. Make sure to check the design files and hookup guide since the design can vary between products. Below are a few examples.</p>"},{"location":"single_page/#sparkfun-rtk-torch","title":"SparkFun RTK Torch","text":"<p>For the SparkFun RTK Torch, you will need a serial passthrough via the ESP32. First, power the unit and connect a USB cable to its USB port. We do not have to worry about attaching a multi-band L1/L2/L5 antenna since there is one already built in.</p> <p>Open a serial terminal window set to 115200 baud. Then put the device into serial passthrough mode. From the main menu, navigate to: System s &gt; Hardware h &gt; UM980 Direct Connect 13. This will put the device into a passthrough mode, but with special character monitoring that allows the UM980 to be reset when bootloading is detected. Close the terminal connection so that UPrecise can connect to the COM port.</p> <p>Note</p> <p>Some terminals cause the ESP32 to reset when closing the port. This reset causes the UM980 pass-through mode to exit. TeraTerm is known to cause this issue. To enter pass-through mode we recommend using the Arduino Serial Monitor.</p>"},{"location":"single_page/#sparkfun-um980-triband-gnss-rtk-breakout","title":"SparkFun UM980 Triband GNSS RTK Breakout","text":"<p>On the SparkFun UM980 Triband GNSS RTK Breakout Board, you will need to connect a USB cable between your computer and the breakout board. Then connect a multi-band L1/L2/L5 antenna to the SMA connector.</p>"},{"location":"single_page/#installing-drivers","title":"Installing Drivers","text":"<p>If you've never connected a USB-to-serial converter to your computer before, you may need to install drivers. The drivers will depend on your USB-to-serial converter. In this case, the SparkFun RTK Torch is populated with the CH34X and a RedBoard IoT Development Board (ESP32) used to connect to a UM980 is populated with the CH340.</p> <p>You may need to install drivers for the USB-to-serial converter. Check out our section on \"How to Install CH340 Drivers\" for help with the installation.</p> <ul> <li> <p> </p> <p> How to Install CH340 Drivers </p> </li> </ul>"},{"location":"single_page/#installing-uprecise","title":"Installing UPrecise","text":"<p>To update firmware, you will need the UPrecise Software. You can head over to Unicore's UPrecise Download Page. Or clicking on the button below to download UPrecise.</p> Click Here to Download UPrecise V2.0 (EXE) <p>Note</p> <p>For the latest software version, you may want to check the Unicore's UPrecise Download Page.</p> <p>Once downloaded, select the executable and follow the prompts to install the software to your computer. Note that the software is currently only supported on Windows 7/8/10, 64-bit OS.</p>"},{"location":"single_page/#selecting-a-language","title":"Selecting a Language","text":"<p>After downloading and installing UPrecise, open the software up! There are two languages that are supported with the software. For the scope of this tutorial, we'll be using the software in English. Click on \"CH\" button to change the default language from Chinese to English.</p> <p>For users with UPrecise V2.0, you will be prompted with a new window indicating that you will need reboot the software for the changes to take effect. Select the button on the left to reboot the software.</p> <p>The language will switch to English similar to the image below.</p>"},{"location":"single_page/#connecting-the-um980-to-a-computer","title":"Connecting the UM980 to a Computer","text":"<p>We will assume that you have a triband multiband antenna connected to the UM980 and USB cable connected to your computer. For users that have the SparkFun RTK Torch, make sure to set it in passthrough mode. Select the COM port that the CH340 enumerated to. There is no need to make a selection in the other two drop down menus by the COM port since the software automatically determines the receiver and baud rate. In this case, it was COM17. You may need to open your device manager to determine which COM port the CH340 enumerated to.</p> <p>Once connected, you can explore the features available on the software as the UM980 sends data to your COM port. For the scope of this tutorial, we will focus on updating the firmware Make sure to check out the UPrecise user manual for more information on the software:</p> UPrecise User Manual R2.0 - English (PDF)"},{"location":"single_page/#firmware-update","title":"Firmware Update","text":"<p>Note</p> <p>The following instructions were taken from the UPrecise User Manual: 2.2.11 Receiver Upgrade. For more information about how to use UPrecise software, make sure to check out the user manual.</p> <p>Note</p> <p>At the time of writing, UPrecise Version 2.0 was used. Note that the GUI appearance and features may change upon future releases.</p> <p>You can update your firmware (they call this a firmware upgrade in the manual) using Unicore's UPrecise software. Make sure to check Unicore's UM980 product page, download center, or contact Unicore Communications for any firmware releases.</p> <p>We'll assume that you have the firmware downloaded at this point and connected to the UM980. With UPrecise open, click on the menu with the triple bar (\u2261) near the upper left of the window to expand the menu.</p> <p>The menu should expand with text next to each icon.</p> <p>Click on the Receiver Upgrade button. The following window should open up.</p> <p>Click the Select upgrade file button. Head to the folder where you downloaded the firmware and select the file. The extension should be a  *pkg file.  In this case, there was a copy of the firmware in the Update Firmware Unicore GNSS Receiver Repo named \"UM980_R4.10Build11833.pkg\". Older firmware versions that were used SparkFun products were moved to the Old Firmware folder.</p> <p>Select the GNSS receiver that will be receiving the firmware update. In this case it was Receiver1. While we are at it, select either the \"Soft reset\" or \"Hard reset\". While updating, the module will need to be reset and this selection will determine the reset method. Let's select the \"Soft Reset\" and have UPrecise reset the module.</p> <p>When ready, hit the \"Start\" button!</p> <p>Warning</p> <p>Make sure to pay attention to the progress bar! You'll want to avoid any interruptions while the firmware is updating as this will cause the upgrade to fail.</p> <p>Note</p> <p>If you have issues updating the software with the reset method chosen, try exiting the Receiver Upgrade menu by hitting the \"x\" button. Then disconnect and reconnect the module by selecting the \"Connect\" button. You will then need to open the Receiver Upgrade window again before hitting the \"Start\" button.</p> <p>Once the firmware has been updated, you will notice that the progress bar is at 100% and a message indicating that the firmware upgrade succeeded and finished. You can exit out of the window by clicking on the \"x\" button.</p>"},{"location":"single_page/#verification","title":"Verification","text":"<p>Now that we have successfully flashed the firmware, let's verify the version number. In the serial terminal, send the command <code>VERSIONA</code>. The UM980 will respond by providing the firmware version and authorization date. Look for the part of the message after the model number (i.e. \"UM980\"). This should match the build number from *pkg file name.</p> <p>Note</p> <p>Sending the command <code>VERSIONA</code> is one method of verifying the version number on the UM980. For users that are using the SparkFun RTK Torch, you can power cycle the unit and view the output at startup. There should be a line indicating the version build number as the SparkFun RTK Torch is initializing.</p> <p> </p> <p>You can also use the Arduino example code to verify the version number on the UM980 breakout board.</p> <p> </p> <p>Try viewing the UM980 output through the UPrecise software. Not seeing any satellites in the GUI or output in the serial terminal? Try adjusting the configuration to output every second. From the menu, head to the following to configure the messages: Receiver Configurations &gt; Message configuration. In this case, we selected the following: GGA, GSA, GSV, RMC, GST. Feel free to select more depending on your application.</p> <p>Scroll down Receiver Configurations window and select Enter button.</p> <p>You should be able to see messages outputting through the serial terminal and displaying graphically.</p>"},{"location":"single_page/#troubleshooting","title":"Troubleshooting","text":""},{"location":"single_page/#general-troubleshooting-help","title":"General Troubleshooting Help","text":"<p>Note</p> <p>  Not working as expected and need help?  </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. </p> <p>SparkFun Technical Assistance Page</p> <p>If you don't find what you need there, the SparkFun Forums are a great place to find and ask for help. If this is your first visit, you'll need to create a Forum Account to search product forums and post questions.</p> <p>Create New Forum Account Log Into SparkFun Forums</p>"},{"location":"single_page/#resources","title":"Resources","text":"<p>Now that you've successfully got your SparkFun TriBand GNSS RTK- Breakout - UM980 up and running, it's time to incorporate it into your own project! For more information, check out the resources below:</p> <ul> <li>Unicore Communications UM980<ul> <li>General Specifications (PDF)</li> <li>Datasheet (PDF)</li> <li>User Manual (PDF)</li> <li>Reference Commands Manual (PDF)</li> <li>UPrecise V2.0 (EXE)</li> <li>UPrecise User Manual (PDF)</li> </ul> </li> <li>CH340 Drivers</li> <li>SparkFun RTK</li> </ul> <p>Or check out some of these tutorials using the UM980!</p> <ul> <li> <p> </p> <p> SparkFun RTK Everywhere Product Manual </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Triband GNSS RTK Breakout - UM980 Hookup Guide </p> </li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#general-troubleshooting-help","title":"General Troubleshooting Help","text":"<p>Note</p> <p>  Not working as expected and need help?  </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. </p> <p>SparkFun Technical Assistance Page</p> <p>If you don't find what you need there, the SparkFun Forums are a great place to find and ask for help. If this is your first visit, you'll need to create a Forum Account to search product forums and post questions.</p> <p>Create New Forum Account Log Into SparkFun Forums</p>"},{"location":"uprecise/","title":"Installing UPrecise","text":"<p>To update firmware, you will need the UPrecise Software. You can head over to Unicore's UPrecise Download Page. Or clicking on the button below to download UPrecise.</p> Click Here to Download UPrecise V2.0 (EXE) <p>Note</p> <p>For the latest software version, you may want to check the Unicore's UPrecise Download Page.</p> <p>Once downloaded, select the executable and follow the prompts to install the software to your computer. Note that the software is currently only supported on Windows 7/8/10, 64-bit OS.</p>"},{"location":"uprecise/#selecting-a-language","title":"Selecting a Language","text":"<p>After downloading and installing UPrecise, open the software up! There are two languages that are supported with the software. For the scope of this tutorial, we'll be using the software in English. Click on \"CH\" button to change the default language from Chinese to English.</p> <p>For users with UPrecise V2.0, you will be prompted with a new window indicating that you will need reboot the software for the changes to take effect. Select the button on the left to reboot the software.</p> <p>The language will switch to English similar to the image below.</p>"},{"location":"uprecise/#connecting-the-um980-to-a-computer","title":"Connecting the UM980 to a Computer","text":"<p>We will assume that you have a triband multiband antenna connected to the UM980 and USB cable connected to your computer. For users that have the SparkFun RTK Torch, make sure to set it in passthrough mode. Select the COM port that the CH340 enumerated to. There is no need to make a selection in the other two drop down menus by the COM port since the software automatically determines the receiver and baud rate. In this case, it was COM17. You may need to open your device manager to determine which COM port the CH340 enumerated to.</p> <p>Once connected, you can explore the features available on the software as the UM980 sends data to your COM port. For the scope of this tutorial, we will focus on updating the firmware Make sure to check out the UPrecise user manual for more information on the software:</p> UPrecise User Manual R2.0 - English (PDF)"},{"location":"verification/","title":"Verification","text":"<p>Now that we have successfully flashed the firmware, let's verify the version number. In the serial terminal, send the command <code>VERSIONA</code>. The UM980 will respond by providing the firmware version and authorization date. Look for the part of the message after the model number (i.e. \"UM980\"). This should match the build number from *pkg file name.</p> <p>Note</p> <p>Sending the command <code>VERSIONA</code> is one method of verifying the version number on the UM980. For users that are using the SparkFun RTK Torch, you can power cycle the unit and view the output at startup. There should be a line indicating the version build number as the SparkFun RTK Torch is initializing.</p> <p> </p> <p>You can also use the Arduino example code to verify the version number on the UM980 breakout board.</p> <p> </p> <p>Try viewing the UM980 output through the UPrecise software. Not seeing any satellites in the GUI or output in the serial terminal? Try adjusting the configuration to output every second. From the menu, head to the following to configure the messages: Receiver Configurations &gt; Message configuration. In this case, we selected the following: GGA, GSA, GSV, RMC, GST. Feel free to select more depending on your application.</p> <p>Scroll down Receiver Configurations window and select Enter button.</p> <p>You should be able to see messages outputting through the serial terminal and displaying graphically.</p>"},{"location":"github/contribute/","title":"Contribute: Help Fix our Mistake!","text":"<p>Spot something wrong? Feel free to contribute our open-source design and documentation. </p>"},{"location":"github/contribute/#improve-our-documentation","title":"Improve our Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>These pages are contained in the <code>docs</code> folder of the Update Firmware Unicore GNSS Receiver repository.</li> </ul>"},{"location":"github/contribute/#submit-a-correction","title":"Submit a Correction","text":"<ol> <li>Fork this repo</li> <li>Add your corrections or improvements to the markdown file</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/contribute/#improve-our-hardware-design","title":"Improve our Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the respective hardware repositories.</li> </ul>"},{"location":"github/contribute/#submit-a-design-improvement","title":"Submit a Design Improvement","text":"<ol> <li>Fork this repo</li> <li>Add your design improvements</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvements, if they are within our board design standards and meet our product design requirements, we will flag these changes for our next board revision. (Please note, that even if your suggestion is accepted, these changes may not be immediate. We may have to cycle through our current product inventory first.)</li> </ul> </li> </ol>"},{"location":"github/contribute/#contributors","title":"Contributors","text":"<p>Let's provided some recognition to the contributors for this project!</p> <p> </p>"},{"location":"github/file_issue/","title":"Did we make a mistake?","text":"<p>Spot something wrong? Please let us know. </p> <p>Attention</p> <p>This is not where customers should seek assistance on a product. If you require technical assistance or have questions about a product that is not working as expected, please head over to the SparkFun Technical Assistance page for some initial troubleshooting.  SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, you'll need a Forum Account to search product forums and post questions.</p>"},{"location":"github/file_issue/#discrepancies-in-the-documentation","title":"Discrepancies in the Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>The documentation files for these pages are contained in the <code>docs</code> folder of the Update Firmware Unicore GNSS Receiver repository.</li> </ul>"},{"location":"github/file_issue/#spot-something-wrong","title":"Spot something wrong?","text":"<p>If a section of the documentation is incorrect, please open an issue and let us know.</p>"},{"location":"github/file_issue/#do-you-have-a-suggested-correction","title":"Do you have a suggested correction?","text":"<ol> <li>With a GitHub account, fork this repo</li> <li>Add your correction(s) or improvement(s) to the markdown file(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvement(s) to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/file_issue/#problems-in-the-hardware-design","title":"Problems in the Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the Update Firmware Unicore GNSS Receiver repository.</li> </ul>"},{"location":"github/file_issue/#does-something-not-make-sense","title":"Does something not make sense?","text":"<p>If part of the design is confusing, please open an issue and let us know.</p>"},{"location":"github/file_issue/#did-we-forget-to-include-an-important-function-of-the-board","title":"Did we forget to include an important function of the board?","text":"<ul> <li>Please keep in mind that we may intentionally exclude certain functions of the board to meet our product design requirements. (For example, our Qwiic Micro boards are intended to fit on a small board layout and only use I<sup>2</sup>C communication; therefore, we may not have the SPI and interrupt pins available for users.)</li> <li>If part of the board's functionality is missing, please open an issue and file a feature request.</li> </ul>"},{"location":"github/file_issue/#do-you-wish-to-contribute-directly-to-improving-the-board-design","title":"Do you wish to contribute directly to improving the board design?","text":"<ol> <li>With a GitHub account, Fork this repo</li> <li>Add your design improvement(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s), if they are within our board design standards and meet our product design requirements, we will flag these changes for our next board revision. (Please note, that even if your suggestion is accepted, these changes may not be immediate. We may have to cycle through our current product inventory first.)</li> </ul> </li> </ol>"},{"location":"javascript/","title":"javascript directory","text":"<p>This folder should contain the files for the custom javascript that is enabled in the product documentation</p>"}]}